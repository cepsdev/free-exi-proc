/*
    v2g-guru-exi - an EXI processor (EXI stands for "Efficient XML Interchange")
    Copyright (C) 2022  Tomas Prerovsky <cepsdev@hotmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/


macro ChildContentItemsMinimal{
    GrammarNonterminal ElementContent;
    val i = hd(arglist);
    val j = hd(tail(arglist));
    rhs{SE(_*_); ElementContent; EventCode(i,j);
        add_if_matched{
            SE(_*_); ElementContent; EventCode(0);                
        };
    };
    rhs{CH(_*_); ElementContent; EventCode(i,j+1);
        add_if_matched_and_matched_event_code_length_is_not_one{
            do_not_replace{CH(_*_);}; ElementContent; EventCode(0);                
        };
    };
};

kind EXIBuiltInElementGrammarMinimal;
EXIBuiltInElementGrammarMinimal BuiltInElementGrammarMinimal;

Grammar{
    BuiltInElementGrammarMinimal;
    GrammarNonterminal StartTagContent, ElementContent;
    lhs{StartTagContent;};
        rhs{EE; EventCode(0,0);PopGrammar;};
        rhs{
            AT(_*_); StartTagContent; EventCode(0,1);
            add_if_matched{
                AT(_*_); StartTagContent; EventCode(0);                
            };
        };     
        ChildContentItemsMinimal{0;2;};        
    lhs{ElementContent;};
        rhs{EE; EventCode(0); PopGrammar;};
        ChildContentItemsMinimal{1;0;};  
};

exi_event_stream{
    SD;
    SE("notebook", uri(""));
    AT(date = "2007-09-12", uri(""));
    SE("note", uri(""));
    AT(category = "EXI", uri(""));
    AT(date = "2007-07-23", uri(""));
    SE("subject", uri(""));
    CH("EXI", inherited_uri(""), inherited_name("subject"));
    EE/*("subject")*/;
    SE("body", uri(""));
    CH("Do not forget it!", inherited_uri(""), inherited_name("body"));
    EE/*("body")*/;
    EE/*("note")*/;
    SE("note", uri(""));
    AT(date = "2007-09-12");
    SE("subject", uri(""));
    CH("Shopping List", inherited_uri(""), inherited_name("subject"));
    EE/*("subject")*/;
    SE("body");
    CH("milk,honey", inherited_uri(""), inherited_name("body"));
    EE/*("body")*/;
    EE/*("note")*/;
    EE/*("notebook")*/;
    ED;
};

exi_processor_add_start_grammar(
    root.Grammar.contains_symbol("EXIBuiltInDocumentGrammar") 
    # "Search through the list of all global Grammar structures, 
       pick the ones marked as 'EXIBuiltInDocumentGrammar'."
);

exi_processor_add_generic_grammar(
    GenericGrammar{
        Pattern{
            SE(_*_);
        };
        
        root.Grammar.contains_symbol("BuiltInElementGrammarMinimal");
    }
);


val encode_result =     exi_processor_encode(
        events{
            root.exi_event_stream.content();
        });   

print("\n*** encode_result = ",encode_result, "\n\n\n");
//print("Number of exi-events generated (should be 24): ",encode_result.encoding.content().size(),"\n" );
//encode_result.encoding.content().size()
encode_result;

/*expected_encoding{
        0;
        0;
        0,1;
        1,2;
        0,1;
        1,1;
        2,2;
        0,3;
        0;
        1,0;
        0,3;
        0;
        1;
        1,0;
        1;
        0;
        0;
        0;
        0;
        0;
        0;
        1;
        1;
        0;
};*/