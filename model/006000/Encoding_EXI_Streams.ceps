label __6 title = "6. Encoding EXI Streams";
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"

6. Encoding EXI Streams

The rules for encoding a series of events as en EXI stream are very simple and 
are driven by a declarative set of grammars that describes the structure of an 
EXI stream.
Every event in the stream is encoded using the same set of encoding rules, 
which are summarized as follows:

 1. Get the next event data to be encoded
 2. If fidelity options (see 6.3 Fidelity Options) indicate this event type is 
    not processed, go to step 1
 3. Use the grammars to determins the event code of the event
 4. Encode the event code followed by the event content (see Table 4-1)
 5. Evalutat the grammar production matched by the event
 6. Repeat until the End Document (ED) event is encoded

Self-contained (SC), namespace (NS) and attribute (AT) events associated with a 
given element occur directly after the start element (SE) event in the following 
order:

| SC | NS | NS | ... | NS | AT (xsi:type) | AT (xsi:nil) | AT | AT | ... | AT |

Namespace (NS) events occur in document order. The xsi:type and xsi:nil 
attributes occur before all other AT events. When the grammar currently in 
effect for the element is either a built-in element grammar (see 8.4.3 Built-in 
Element Grammar) or a schema-informed element fragment grammar (see 8.5.3 
Schema-informed Element Fragment Grammar), the remaining attribute (AT) events 
can occur in any order. Otherwise, when the grammar in effect is a schema-
informed element grammar or a schema-informed type grammar (see 8.5.4 Schema-
informed Element and Type Grammars), the remaining attributes can occur in any 
order that is permitted by the grammar, though in practice they SHOULD occur in
lexicographical order sorted first by qname local-name then by qname uri for 
achieving better compactness, where a qname is a qname of an attribute.

Note:

Under certain circumstances, it is not strictly required that the xsi:type or 
xsi:nil attributes occur before other AT events of the same elemnt. See the 
notes in section 8.4.3 Built-in Element Grammar for details.

EXI uses the same simple procedure described above, to encode well-formed 
documents, document fragments, schema-valid information items, schema-invalid 
information items, information items partially described by schemas and 
information items with no schema at all. Only the grammars that describe 
these items differ. For example, an element with no schema information is 
encoded according to the XML grammar defined by the XML specification, while 
an element with schema information is encoded according to the more specific 
grammar defined by that schema.

[Definition:] An event code is a sequence of 1 to 3 non-negative integers 
called parts used to identify each event in an EXI stream. The EXI grammars 
describe which events may occur at each point in an EXI stream and associate
an event code with each one (See 8.2. Grammar Event Codes for more describtion
of event codes.)

Section 6.1 Determining Event Codes describes in detail how the grammar is used
to determine the event code of an event. Section 6.2 Representing Event Codes
describes available fidelity options and how they affect the EXI stream.
Section 7. Representing Event Content describes how the typed event contents
are represented as bits.

"

);